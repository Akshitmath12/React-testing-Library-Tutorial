// Test generated by RoostGPT for test React_Test using AI Type Open AI and AI Model gpt-4

import { render, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Login from './Login';

describe("Login form", () => {
  let getByTestId;
  let getByText;

  beforeEach(() => {
    const component = render(<Login />);
    getByTestId = component.getByTestId;
    getByText = component.getByText;
  });

  test("email and password inputs are empty initially", () => {
    expect(getByTestId('formBasicEmail').value).toBe("");
    expect(getByTestId('formBasicPassword').value).toBe("");
  });

  test("submit button is disabled if form inputs are empty", () => {
    expect(getByTestId('submit').disabled).toBe(true);
  });

  test("error alert is shown if email is not valid", () => {
    fireEvent.change(getByTestId('formBasicEmail'), { target: { value: "invalidEmail" } });
    fireEvent.change(getByTestId('formBasicPassword'), { target: { value: "password" } });
    fireEvent.click(getByTestId('submit'));
    expect(getByText('Email is not valid')).toBeInTheDocument();
  });

  test("user is shown if email is valid", () => {
    fireEvent.change(getByTestId('formBasicEmail'), { target: { value: "test@test.com" } });
    fireEvent.change(getByTestId('formBasicPassword'), { target: { value: "password" } });
    fireEvent.click(getByTestId('submit'));
    expect(getByText('test@test.com')).toBeInTheDocument();
  });

  test("form is reset after clicking reset button", () => {
    fireEvent.change(getByTestId('formBasicEmail'), { target: { value: "test@test.com" } });
    fireEvent.change(getByTestId('formBasicPassword'), { target: { value: "password" } });
    fireEvent.click(getByTestId('reset'));
    expect(getByTestId('formBasicEmail').value).toBe("");
    expect(getByTestId('formBasicPassword').value).toBe("");
  });
});
