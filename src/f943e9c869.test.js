// Test generated by RoostGPT for test React_Test using AI Type Open AI and AI Model gpt-4

// Importing the required dependencies
const reportWebVitals = require('./reportWebVitals');
const webVitals = require('web-vitals');

// Mocking the 'web-vitals' module
jest.mock('web-vitals');

// Test suite for reportWebVitals
describe('reportWebVitals', () => {
  let onPerfEntry;

  // Setup before each test case
  beforeEach(() => {
    onPerfEntry = jest.fn();
    webVitals.getCLS.mockImplementation(onPerfEntry);
    webVitals.getFID.mockImplementation(onPerfEntry);
    webVitals.getFCP.mockImplementation(onPerfEntry);
    webVitals.getLCP.mockImplementation(onPerfEntry);
    webVitals.getTTFB.mockImplementation(onPerfEntry);
  });

  // Test case: Valid function as input
  test('should call the function when a function is provided as input', async () => {
    await reportWebVitals(onPerfEntry);
    expect(onPerfEntry).toHaveBeenCalledTimes(5);
  });

  // Test case: Non-function as input
  test('should not call the function when a non-function is provided as input', async () => {
    await reportWebVitals('not a function');
    expect(onPerfEntry).not.toHaveBeenCalled();
  });

  // Test case: No input
  test('should not call the function when no input is provided', async () => {
    await reportWebVitals();
    expect(onPerfEntry).not.toHaveBeenCalled();
  });

  // Test case: Function throwing an error
  test('should handle errors gracefully when the function throws an error', async () => {
    onPerfEntry.mockImplementation(() => { throw new Error('Test error'); });
    await expect(reportWebVitals(onPerfEntry)).resolves.toBeUndefined();
  });
});
